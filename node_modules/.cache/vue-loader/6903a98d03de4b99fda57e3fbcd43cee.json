{"remainingRequest":"/mnt/c/Users/evils/Downloads/MyRepo/evilscaught-web/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/mnt/c/Users/evils/Downloads/MyRepo/evilscaught-web/node_modules/vue-loader/lib/index.js!/mnt/c/Users/evils/Downloads/MyRepo/evilscaught-web/node_modules/vue-markdown-loader/lib/markdown-compiler.js??ref--14-1!/mnt/c/Users/evils/Downloads/MyRepo/evilscaught-web/src/components/markdown_files/configuring_portable_git.md?vue&type=template&id=4741e70b&","dependencies":[{"path":"/mnt/c/Users/evils/Downloads/MyRepo/evilscaught-web/src/components/markdown_files/configuring_portable_git.md","mtime":1606596633515},{"path":"/mnt/c/Users/evils/Downloads/MyRepo/evilscaught-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/evils/Downloads/MyRepo/evilscaught-web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/mnt/c/Users/evils/Downloads/MyRepo/evilscaught-web/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/mnt/c/Users/evils/Downloads/MyRepo/evilscaught-web/node_modules/vue-markdown-loader/lib/markdown-compiler.js","mtime":1606597708395}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}